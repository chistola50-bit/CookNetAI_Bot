import logging
from aiogram import Bot, Dispatcher, types, executor
import sqlite3
import config

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn = sqlite3.connect(config.DB_PATH)
cur = conn.cursor()
cur.execute("CREATE TABLE IF NOT EXISTS recipes (id INTEGER PRIMARY KEY, user TEXT, name TEXT, description TEXT)")
conn.commit()

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üç≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", "üìñ –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã")
    await msg.answer("–ü—Ä–∏–≤–µ—Ç, —à–µ—Ñ üë®‚Äçüç≥!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üç≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç")
async def add_recipe(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
    dp.register_message_handler(save_name, state="waiting_for_name")

async def save_name(msg: types.Message):
    name = msg.text
    cur.execute("INSERT INTO recipes (user, name, description) VALUES (?, ?, ?)", (msg.from_user.id, name, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"))
    conn.commit()
    await msg.answer("‚úÖ –†–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

@dp.message_handler(lambda msg: msg.text == "üìñ –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã")
async def my_recipes(msg: types.Message):
    cur.execute("SELECT name FROM recipes WHERE user=?", (msg.from_user.id,))
    recipes = cur.fetchall()
    if recipes:
        await msg.answer("üìö –¢–≤–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã:\n" + "\n".join([r[0] for r in recipes]))
    else:
        await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ üòî")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
